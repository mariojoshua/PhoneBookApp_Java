Prototype of Dictionary Project:

When the ContactsApp solution is run, the following should be displayed:

Press 1 to Create Contacts Book
Press 2 to Load Contacts Book
Press 3 to Search contacts
Press 4 to List contacts
Press 5 for Birthday reminders
Press 6 to Exit
Enter choice:

If 1 is given as input, 
a) you should first ask the user to enter name of Contacts Book.
You should validate whether this Contacts Book name is already used by another as a business validation (assume the path to a folder and concat the name to this and using File class, validate).
b) Then you should display the following menu:

Press 1 to Add a Contact
Press 2 to Edit a Contact
Press 3 to Remove a Contact
Press 4 to List the Contact
Press 5 to Search Contact
Press 6 to Go back

If 1 is selected,
i) you should ask the user to input a contact name (this has to be unique)
ii) then take inputs of date of birth, address, pet name, tag, many emails and many phone numbers. 

Choose n to Goback

Implementation tip: Once all the details of the contact is given, you should insert the contact info into the file. Concat the info like this:

contact name = dob:petname:tag:address:email1,email2,email3..:ph1,ph2,...:crtdate

vi) When 2 is selected (Edit contact), you should allow the user to  a) remove or change individual contact info or b) add new email/phone
vii) A user can remove a contact that exits only. All its info has to be removed from the file.
viii) When 4 is selected (List contacts), the user should be shown the following submenu:

Press 1 to list contacts by alphabetical listing by name
Press 2 to list contacts by alphabetical ordering of tags
Press 3 to list contacts by created date
Press 4 to list contacts by string length (length of entire line info on contact)

Depending on user input, the sorting of contacts have to be done.

ix) When 5 is selected (Search), you should ask the user to input a string to search.
This string has be searched in the entire contents of the contacts book(name, email,phone num, tags, etc) and the following should be displayed:

Total number of occurances : <num>
Number of occurances in email: <num>
Matches found:
<contact name1 - email1 text1>
<contact name2 - email2 text2>
...
Number of occurances in Phone num: <num>
<contact name1 - ph - email>
<contact name2 - ph - email>
...
Number of occurances in tags: <num>
<contact name - ph - email - tag>
<contact name - ph - email - tag>
...

In the outer menu, if 2 is given as input (Load Contacts Book), you should ask the user to input the name 
of contacts book (which should exist) and then you will display the same inner menu where in the user can
now add,edit,remove,list,search from the loaded contacts book.

Implementation tips:
a) First iteration: Implement the ContactsApp solution without using any OO techniques. Simply create
a class with main() method that interacts with user and provides functionality. No need to create any other class. Create static methods to reuse validation.

When a user inputs a Contact Book name as input, create a File instance with the input name as constructor argument,
verify if this file exists and if not, you can create the file. 
It is into this file that you will write the contents once the user adds/edits/removes a word.
Use a FileWriter encapsulated in a BufferedWriter to do file writing (Pass true as its second parameter to append to the file).
In the file, one line represents one contacts input.
You can use BufferedWriters newLine() method to insert a new line in the file.
For removing a line (a contact), you will have to copy the contents of the file temporarily to memory except the one line and
then write back to the same file, overwriting the contents.

b) Second iteration: Implement the ContactApp project by implementing MVC design pattern, OO techniques and storage in both file and database.
